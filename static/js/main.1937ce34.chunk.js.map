{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["axios","defaults","withCredentials","api","create","URL","App","props","useState","duration","setDuration","details","setDetails","message","setMessage","window","localStorage","getItem","token","setToken","Date","endDate","setEndDate","React","endTime","setEndTime","fetchDetails","a","post","resp","data","reservations","state","licensePlate","temperature","variant","toString","includes","console","log","useEffect","submit","getDate","getMonth","getFullYear","getHours","getMinutes","eco","submitQuick","moment","format","add","className","Grid","Alert","severity","item","xs","Card","CardContent","Typography","Chip","color","style","backgroundColor","label","length","textAlign","Button","size","onClick","open","utils","DateFnsUtils","InputLabel","htmlFor","Math","round","Slider","value","min","max","onChange","e","aria-labelledby","disableToolbar","margin","id","KeyboardButtonProps","ampm","paddingTop","disabled","padding","TextareaAutosize","event","newToken","target","setItem","rowsMin","rowsMax","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1937ce34.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport Grid from '@material-ui/core/Grid'\nimport Slider from '@material-ui/core/Slider'\nimport Button from '@material-ui/core/Button'\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize'\nimport axios from 'axios'\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers'\nimport DateFnsUtils from '@date-io/date-fns'\nimport Alert from '@material-ui/lab/Alert'\nimport Chip from '@material-ui/core/Chip'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport moment from 'moment'\n\nimport './tolppa.css'\n\naxios.defaults.withCredentials = true\n\nconst api = axios.create()\nconst URL = 'https://tolppa-gateway-nas5m5k7jq-lz.a.run.app'\n\nconst App = (props) => {\n  const [duration, setDuration] = useState(60)\n  const [details, setDetails] = useState(null)\n  const [message, setMessage] = useState(null)\n  const [token, setToken] = useState(\n    window.localStorage.getItem('token') || '',\n  )\n  const [endDate, setEndDate] = useState(new Date())\n  const [endTime, setEndTime] = React.useState(new Date())\n\n  const fetchDetails = async () => {\n    try {\n      const resp = await api.post(`${URL}/details`, { token })\n      const {\n        reservations,\n        state,\n        licensePlate,\n        temperature,\n      } = resp.data\n      setDetails({ reservations, state, licensePlate, temperature })\n    } catch (e) {\n      setMessage({\n        variant: 'error',\n        message: e.toString().includes('400')\n          ? 'You need to set token!'\n          : 'Unknown error!',\n      })\n      console.log(e)\n    }\n  }\n\n  useEffect(() => {\n    fetchDetails()\n  }, [])\n\n  const onTokenChange = (event) => {\n    const newToken = event.target.value\n    window.localStorage.setItem('token', newToken)\n    setToken(newToken)\n  }\n\n  const submit = async () => {\n    const data = {\n      endDate: `${endDate.getDate()}.${endDate.getMonth()}.${endDate.getFullYear()}`,\n      endTime: `${endTime.getHours()}:${endTime.getMinutes()}`,\n      duration,\n      eco: false,\n      token,\n    }\n    const resp = await api.post(`${URL}/timer`, data)\n    console.log(data, resp)\n  }\n\n  const submitQuick = async () => {\n    const data = {\n      endDate: moment().format('DD.MM.YYYY'),\n      endTime: moment().add(1, 'hours').format('HH:mm'),\n      duration: 60,\n      eco: false,\n      token,\n    }\n    try {\n      await api.post(`${URL}/timer`, data)\n      setMessage({\n        variant: 'success',\n        message: 'Timer sent to gateway successfully!',\n      })\n      setDetails(null)\n      fetchDetails()\n    } catch (e) {\n      setMessage({ variant: 'error', message: e.toString() })\n    }\n  }\n\n  const renderMessage = () =>\n    message ? (\n      <Alert severity={message.variant}>{message.message}</Alert>\n    ) : null\n\n  const renderDetails = () =>\n    details ? (\n      <Grid item xs={12} className=\"row\">\n        <Card>\n          <CardContent>\n            <Typography variant=\"h6\">\n              {details.licensePlate}\n            </Typography>\n            {details.state ? (\n              <Chip\n                color=\"primary\"\n                style={{ backgroundColor: 'green' }}\n                label={'Your tolppa is on!'}\n              />\n            ) : (\n              <Chip\n                color=\"primary\"\n                style={{ backgroundColor: '#B00020' }}\n                label={'Your tolppa is off!'}\n              />\n            )}\n            <Typography variant=\"body1\">\n              {details.temperature}C, {details.reservations.length}/2\n              timers\n            </Typography>\n          </CardContent>\n        </Card>\n      </Grid>\n    ) : null\n\n  return (\n    <div className=\"container\">\n      <Grid>\n        {renderMessage()}\n        {renderDetails()}\n        <Card style={{ textAlign: 'center' }}>\n          <CardContent>\n            <Button\n              size=\"large\"\n              color=\"primary\"\n              variant=\"outlined\"\n              onClick={() =>\n                window.open('https://eparking.fi/fi/u#/reservations')\n              }\n            >\n              Manage reservations!\n            </Button>\n          </CardContent>\n        </Card>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <Grid item xs={12} className=\"row\">\n            <Card>\n              <CardContent>\n                <Grid>\n                  <Grid item xs={12}>\n                    <InputLabel htmlFor=\"dur\">\n                      Duration {duration}min{' '}\n                      {duration >= 60\n                        ? Math.round(duration / 60) + 'h'\n                        : null}\n                    </InputLabel>\n                    <Slider\n                      label=\"Duration\"\n                      value={duration}\n                      min={15}\n                      max={200}\n                      onChange={(e, value) => setDuration(value)}\n                      aria-labelledby=\"continuous-slider\"\n                    />\n                  </Grid>\n                  <Grid item xs={12} className=\"form-row\">\n                    <KeyboardDatePicker\n                      disableToolbar\n                      variant=\"inline\"\n                      format=\"dd.MM.yyyy\"\n                      margin=\"normal\"\n                      id=\"date-picker-inline\"\n                      label=\"Date for new time\"\n                      value={endDate}\n                      onChange={setEndDate}\n                      KeyboardButtonProps={{\n                        'aria-label': 'change date',\n                      }}\n                    />\n                  </Grid>\n                  <Grid item xs={12} className=\"form-row\">\n                    <KeyboardTimePicker\n                      ampm={false}\n                      margin=\"normal\"\n                      id=\"time-picker\"\n                      label=\"When the car should be ready\"\n                      value={endTime}\n                      onChange={setEndTime}\n                      KeyboardButtonProps={{\n                        'aria-label': 'change time',\n                      }}\n                    />\n                  </Grid>\n                  <Grid\n                    item\n                    xs={12}\n                    style={{\n                      textAlign: 'center',\n                      paddingTop: '1rem',\n                    }}\n                  >\n                    <Button\n                      variant=\"contained\"\n                      disabled={!token}\n                      color=\"primary\"\n                      onClick={submit}\n                    >\n                      Heat the car\n                    </Button>\n                  </Grid>\n                  <Grid\n                    item\n                    xs={12}\n                    style={{\n                      textAlign: 'center',\n                      paddingTop: '1rem',\n                    }}\n                  >\n                    <Button\n                      variant=\"outlined\"\n                      disabled={!token}\n                      color=\"primary\"\n                      onClick={submitQuick}\n                    >\n                      Add quick timer!\n                    </Button>\n                  </Grid>\n                </Grid>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} className=\"row pad\">\n            <Card style={{ padding: '.7rem .5rem' }}>\n              <InputLabel>Add cookies for sign in</InputLabel>\n              <TextareaAutosize\n                value={token}\n                onChange={onTokenChange}\n                rowsMin={10}\n                rowsMax={10}\n              />\n            </Card>\n          </Grid>\n        </MuiPickersUtilsProvider>\n      </Grid>\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}