{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["axios","defaults","withCredentials","api","create","URL","formatMinutes","minutes","Math","floor","App","props","useState","duration","setDuration","details","setDetails","message","setMessage","window","localStorage","getItem","token","setToken","Date","endDate","setEndDate","endTime","setEndTime","addQuick","setAddQuick","fetchDetails","a","post","resp","data","reservations","state","licensePlate","temperature","consumption","variant","toString","includes","console","log","useEffect","interval","setInterval","clearTimeout","submit","getEndTimeAndDate","eco","moment","format","add","endDateMoment","endTimeMoment","className","Grid","Alert","severity","item","xs","Card","CardContent","CircularProgress","activeTimer","timers","dateFormat","now","find","dateStart","dateEnd","timeStart","timeEnd","start","end","isBefore","isAfter","findActiveTimer","heatedTime","diff","Typography","length","renderDetails","utils","DateFnsUtils","Fab","color","onClick","InputLabel","htmlFor","Slider","label","value","min","max","onChange","e","aria-labelledby","disableToolbar","margin","id","KeyboardButtonProps","ampm","style","textAlign","paddingTop","Button","disabled","padding","TextareaAutosize","event","newToken","target","setItem","rowsMin","rowsMax","size","open","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.24efdebd.chunk.js","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport Grid from '@material-ui/core/Grid'\nimport Slider from '@material-ui/core/Slider'\nimport Button from '@material-ui/core/Button'\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize'\nimport Fab from '@material-ui/core/Fab'\nimport AccessAlarms from '@material-ui/icons/AccessAlarms'\nimport SpeedIcon from '@material-ui/icons/Speed'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport axios from 'axios'\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers'\nimport DateFnsUtils from '@date-io/date-fns'\nimport Alert from '@material-ui/lab/Alert'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport moment from 'moment'\n\nimport './tolppa.css'\n\naxios.defaults.withCredentials = true\n\nconst api = axios.create()\nconst URL =\n  !process.env.NODE_ENV || process.env.NODE_ENV === 'development'\n    ? 'http://localhost:1337'\n    : 'https://tolppa-gateway-nas5m5k7jq-lz.a.run.app'\n\nconst App = (props) => {\n  const [duration, setDuration] = useState(60)\n  const [details, setDetails] = useState(null)\n  const [message, setMessage] = useState(null)\n  const [token, setToken] = useState(\n    window.localStorage.getItem('token') || '',\n  )\n  const [endDate, setEndDate] = useState(new Date())\n  const [endTime, setEndTime] = useState(new Date())\n  const [addQuick, setAddQuick] = useState(true)\n\n  const fetchDetails = async () => {\n    try {\n      const resp = await api.post(`${URL}/details`, { token })\n      const {\n        reservations,\n        state,\n        licensePlate,\n        temperature,\n        consumption,\n      } = resp.data\n      setDetails({\n        reservations,\n        state,\n        licensePlate,\n        temperature,\n        consumption,\n      })\n    } catch (e) {\n      setMessage({\n        variant: 'error',\n        message: e.toString().includes('400')\n          ? 'You need to set token!'\n          : 'Unknown error!',\n      })\n      console.log(e)\n    }\n  }\n\n  useEffect(() => {\n    fetchDetails()\n    const interval = setInterval(fetchDetails, 5000)\n    return () => clearTimeout(interval);\n  }, [])\n\n  const onTokenChange = (event) => {\n    const newToken = event.target.value\n    window.localStorage.setItem('token', newToken)\n    setToken(newToken)\n  }\n\n  const submit = async () => {\n    const data = {\n      ...getEndTimeAndDate(),\n      duration,\n      eco: false,\n      token,\n    }\n    try {\n      await api.post(`${URL}/timer`, data)\n      setMessage({\n        variant: 'success',\n        message: 'Timer sent to gateway successfully!',\n      })\n      setDetails(null)\n      fetchDetails()\n    } catch (e) {\n      setMessage({ variant: 'error', message: e.toString() })\n    }\n  }\n\n  const getEndTimeAndDate = () => {\n    if (addQuick)\n      return {\n        endDate: moment().format('DD.MM.YYYY'),\n        endTime: moment().add(duration, 'minutes').format('HH:mm'),\n      }\n    const endDateMoment = moment(endDate)\n    const endTimeMoment = moment(endTime)\n    return {\n      endDate: endDateMoment.format('DD.MM.YYYY'),\n      endTime: endTimeMoment.format('HH:mm'),\n    }\n  }\n\n  const renderMessage = () =>\n    message ? (\n      <Alert severity={message.variant}>{message.message}</Alert>\n    ) : null\n\n  const renderDetails = () => {\n    if (!details)\n      return (\n        <Grid item xs={12} className=\"row\">\n          <Card>\n            <CardContent>\n              <CircularProgress />\n            </CardContent>\n          </Card>\n        </Grid>\n      )\n\n    const activeTimer = findActiveTimer(details.reservations || [])\n    const heatedTime = activeTimer\n      ? moment().diff(\n          moment(\n            `${activeTimer.dateStart} ${activeTimer.timeStart}`,\n            'DD.MM.YYYY HH:mm',\n          ),\n          'minutes',\n        )\n      : 0\n\n    return (\n      <Grid item xs={12} className=\"row\">\n        <Card>\n          <CardContent\n            className={\n              details && details.state ? 'status-on' : 'status-off'\n            }\n          >\n            {details && details.state ? (\n              <>\n                <Typography variant=\"h6\">\n                  Your tolppa is on!\n                </Typography>\n                <Typography variant=\"body1\">\n                  Car heated for {heatedTime}min!{' '}\n                  {`${details.consumption}W`}\n                </Typography>\n              </>\n            ) : (\n              <Typography variant=\"h6\">\n                Your tolppa is off!\n              </Typography>\n            )}\n          </CardContent>\n          <CardContent>\n            <Typography variant=\"subtitle1\">\n              {details.licensePlate}\n            </Typography>\n            <Typography variant=\"body1\">\n              {details.temperature}°C, {details.reservations ? details.reservations.length : 0}/2\n              timers\n            </Typography>\n          </CardContent>\n        </Card>\n      </Grid>\n    )\n  }\n\n  const renderForm = () =>\n    addQuick ? (\n      <>\n        <Grid item xs={12}>\n          <InputLabel htmlFor=\"dur\">\n            {formatMinutes(duration)}\n          </InputLabel>\n          <Slider\n            label=\"Duration\"\n            value={duration}\n            min={15}\n            max={200}\n            onChange={(e, value) => setDuration(value)}\n            aria-labelledby=\"continuous-slider\"\n          />\n        </Grid>\n      </>\n    ) : (\n      <>\n        <Grid item xs={12}>\n          <InputLabel htmlFor=\"dur\">\n            {formatMinutes(duration)}\n          </InputLabel>\n          <Slider\n            label=\"Duration\"\n            value={duration}\n            min={15}\n            max={200}\n            onChange={(e, value) => setDuration(value)}\n            aria-labelledby=\"continuous-slider\"\n          />\n        </Grid>\n        <Grid item xs={12} className=\"form-row\">\n          <KeyboardDatePicker\n            disableToolbar\n            variant=\"inline\"\n            format=\"dd.MM.yyyy\"\n            margin=\"normal\"\n            id=\"date-picker-inline\"\n            label=\"Date for new time\"\n            value={endDate}\n            onChange={setEndDate}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </Grid>\n        <Grid item xs={12} className=\"form-row\">\n          <KeyboardTimePicker\n            ampm={false}\n            margin=\"normal\"\n            id=\"time-picker\"\n            label=\"When the car should be ready\"\n            value={endTime}\n            onChange={setEndTime}\n            KeyboardButtonProps={{\n              'aria-label': 'change time',\n            }}\n          />\n        </Grid>\n      </>\n    )\n\n  return (\n    <div className=\"container\">\n      <Grid>\n        {renderMessage()}\n        {renderDetails()}\n\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <Grid item xs={12} className=\"row\">\n            <Card>\n              <CardContent>\n                <Grid>\n                  <Grid item xs={12} className=\"center\">\n                    <Fab\n                      variant=\"extended\"\n                      color=\"primary\"\n                      onClick={() => setAddQuick(!addQuick)}\n                    >\n                      {addQuick ? (\n                        <>\n                          <AccessAlarms /> Schedule car heating\n                        </>\n                      ) : (\n                        <>\n                          <SpeedIcon /> Add quick timer\n                        </>\n                      )}\n                    </Fab>\n                  </Grid>\n                  {renderForm()}\n\n                  <Grid\n                    item\n                    xs={12}\n                    style={{\n                      textAlign: 'center',\n                      paddingTop: '1rem',\n                    }}\n                  >\n                    <Button\n                      variant=\"contained\"\n                      disabled={!token}\n                      color=\"primary\"\n                      onClick={submit}\n                    >\n                      Heat the car\n                    </Button>\n                  </Grid>\n                </Grid>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Grid item xs={12} className=\"row pad\">\n            <Card style={{ padding: '.7rem .5rem' }}>\n              <InputLabel>Add cookies for sign in</InputLabel>\n              <TextareaAutosize\n                value={token}\n                onChange={onTokenChange}\n                rowsMin={10}\n                rowsMax={10}\n              />\n            </Card>\n          </Grid>\n        </MuiPickersUtilsProvider>\n        <Card style={{ textAlign: 'center' }}>\n          <CardContent>\n            <Button\n              size=\"large\"\n              color=\"primary\"\n              variant=\"outlined\"\n              onClick={() =>\n                window.open('https://eparking.fi/fi/u#/reservations')\n              }\n            >\n              Manage reservations!\n            </Button>\n          </CardContent>\n        </Card>\n      </Grid>\n    </div>\n  )\n}\n\nfunction formatMinutes(minutes) {\n  if (minutes < 60) return `${minutes}min`\n  return `${Math.floor(minutes / 60)}h ${minutes % 60}min`\n}\n\nfunction findActiveTimer(timers) {\n  const dateFormat = 'DD.MM.YYYY HH:mm'\n  const now = moment()\n  return timers.find(({ dateStart, dateEnd, timeStart, timeEnd }) => {\n    const start = moment(`${dateStart} ${timeStart}`, dateFormat)\n    const end = moment(`${dateEnd} ${timeEnd}`, dateFormat)\n    return start.isBefore(now) && end.isAfter(now)\n  })\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}