{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["axios","defaults","withCredentials","api","create","URL","formatMinutes","minutes","Math","floor","App","props","useState","duration","setDuration","delay","setDelay","details","setDetails","message","setMessage","window","localStorage","getItem","token","setToken","intervalActive","setIntervalActive","Date","endDate","setEndDate","endTime","setEndTime","addQuick","setAddQuick","setError","variant","error","fetchDetails","useCallback","a","post","resp","data","reservations","state","licensePlate","temperature","consumption","console","log","response","status","callback","savedCallback","useRef","useEffect","current","tick","id","setInterval","clearInterval","useInterval","submit","getEndTimeAndDate","eco","toString","deleteTimers","delete","moment","format","add","className","Grid","style","maxWidth","width","Alert","severity","item","xs","Card","CardContent","CircularProgress","Typography","activeTimer","timers","dateFormat","now","find","dateStart","dateEnd","timeStart","timeEnd","start","end","isBefore","isAfter","findActiveTimer","heatedTime","diff","length","renderDetails","List","map","index","momentDateStart","momentDateEnd","chip","isBetween","Chip","size","label","ListItem","ListItemAvatar","ListItemText","primary","secondary","utils","DateFnsUtils","Fab","color","onClick","InputLabel","htmlFor","Slider","value","min","max","onChange","e","aria-labelledby","disableToolbar","margin","KeyboardButtonProps","ampm","textAlign","paddingTop","Button","disabled","open","padding","TextareaAutosize","event","newToken","target","setItem","rowsMin","rowsMax","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e5c5b4e4.chunk.js","sourcesContent":["import React, {\n  useState,\n  useEffect,\n  useRef,\n  useCallback,\n} from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport Card from '@material-ui/core/Card'\nimport CardContent from '@material-ui/core/CardContent'\nimport Grid from '@material-ui/core/Grid'\nimport Slider from '@material-ui/core/Slider'\nimport Button from '@material-ui/core/Button'\nimport TextareaAutosize from '@material-ui/core/TextareaAutosize'\nimport Fab from '@material-ui/core/Fab'\nimport AccessAlarms from '@material-ui/icons/AccessAlarms'\nimport SpeedIcon from '@material-ui/icons/Speed'\nimport CircularProgress from '@material-ui/core/CircularProgress'\nimport Chip from '@material-ui/core/Chip'\nimport axios from 'axios'\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardTimePicker,\n  KeyboardDatePicker,\n} from '@material-ui/pickers'\nimport List from '@material-ui/core/List'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar'\nimport PowerSettingsNewIcon from '@material-ui/icons/PowerSettingsNew'\nimport DateFnsUtils from '@date-io/date-fns'\nimport Alert from '@material-ui/lab/Alert'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport moment from 'moment'\n\nimport './tolppa.css'\n\naxios.defaults.withCredentials = true\n\nconst api = axios.create()\nconst URL =\n  !process.env.NODE_ENV || process.env.NODE_ENV === 'development'\n    ? 'http://localhost:1337'\n    : 'https://tolppa-gateway-nas5m5k7jq-lz.a.run.app'\n\nconst App = (props) => {\n  const [duration, setDuration] = useState(60)\n  const [delay, setDelay] = useState(0)\n  const [details, setDetails] = useState(null)\n  const [message, setMessage] = useState(null)\n  const [token, setToken] = useState(\n    window.localStorage.getItem('token') || '',\n  )\n  const [intervalActive, setIntervalActive] = useState(true)\n  const [endDate, setEndDate] = useState(new Date())\n  const [endTime, setEndTime] = useState(new Date())\n  const [addQuick, setAddQuick] = useState(true)\n\n  const setError = (message) => {\n    setMessage({\n      variant: 'error',\n      message,\n    })\n    setIntervalActive(false)\n    setDetails({ error: true })\n  }\n\n  const fetchDetails = useCallback(async () => {\n    try {\n      const resp = await api.post(`${URL}/details`, { token })\n      const {\n        reservations,\n        state,\n        licensePlate,\n        temperature,\n        consumption,\n      } = resp.data\n      setDetails({\n        reservations,\n        state,\n        licensePlate,\n        temperature,\n        consumption,\n      })\n    } catch (e) {\n      console.log(e)\n      // Req blocked\n      if (!e.response) return setError('Unknown error!')\n\n      const status = e.response.status\n      let message\n      switch (status) {\n        case 400:\n          message = 'You need to set token!'\n          break\n        case 401:\n          message = 'Login failed'\n          break\n        default:\n          message = 'Unknown error!'\n          break\n      }\n      setError(message)\n    }\n  }, [token])\n\n  useInterval(fetchDetails, intervalActive ? 5000 : null)\n\n  useEffect(() => {\n    async function a() {\n      fetchDetails()\n    }\n    a()\n  }, [fetchDetails])\n\n  const onTokenChange = (event) => {\n    const newToken = event.target.value\n    window.localStorage.setItem('token', newToken)\n    setToken(newToken)\n    setIntervalActive(!!newToken)\n  }\n\n  const resetToken = () => {\n    window.localStorage.setItem('token', '')\n    setToken('')\n    setIntervalActive(false)\n  }\n\n  const submit = async () => {\n    const data = {\n      ...getEndTimeAndDate(),\n      duration,\n      eco: false,\n      token,\n    }\n    try {\n      await api.post(`${URL}/timer`, data)\n      setMessage({\n        variant: 'success',\n        message: 'Timer sent to gateway successfully!',\n      })\n      setDuration(60)\n      setDelay(0)\n      setDetails(null)\n      fetchDetails()\n    } catch (e) {\n      setMessage({ variant: 'error', message: e.toString() })\n    }\n  }\n\n  const deleteTimers = async () => {\n    try {\n      await api.delete(`${URL}/timer`, { data: { token } })\n      setMessage({\n        variant: 'success',\n        message: 'All timers deleted successfully!',\n      })\n      fetchDetails()\n    } catch (e) {\n      setMessage({ variant: 'error', message: e.toString() })\n    }\n  }\n\n  const getEndTimeAndDate = () =>\n    addQuick\n      ? {\n          endDate: moment().format('DD.MM.YYYY'),\n          endTime: moment()\n            .add(delay, 'minutes')\n            .add(duration, 'minutes')\n            .format('HH:mm'),\n        }\n      : {\n          endDate: moment(endDate).format('DD.MM.YYYY'),\n          endTime: moment(endTime).format('HH:mm'),\n        }\n\n  const renderMessage = () =>\n    message ? (\n      <Alert severity={message.variant}>{message.message}</Alert>\n    ) : null\n\n  const renderDetails = () => {\n    if (!details)\n      return (\n        <Grid item xs={12} className=\"row\">\n          <Card>\n            <CardContent>\n              <CircularProgress />\n            </CardContent>\n          </Card>\n        </Grid>\n      )\n    if (details.error)\n      return (\n        <Grid item xs={12} className=\"row\">\n          <Card>\n            <CardContent>\n              <Typography variant=\"h6\">\n                Tolppa status is unknown\n              </Typography>\n            </CardContent>\n          </Card>\n        </Grid>\n      )\n\n    const activeTimer = findActiveTimer(details.reservations || [])\n    const heatedTime = activeTimer\n      ? moment().diff(\n          moment(\n            `${activeTimer.dateStart} ${activeTimer.timeStart}`,\n            'DD.MM.YYYY HH:mm',\n          ),\n          'minutes',\n        )\n      : 0\n\n    return (\n      <Grid item xs={12} className=\"row\">\n        <Card>\n          <CardContent\n            className={\n              details && details.state ? 'status-on' : 'status-off'\n            }\n          >\n            {details && details.state ? (\n              <>\n                <Typography variant=\"h6\">\n                  Your tolppa is on!\n                </Typography>\n                <Typography variant=\"body1\">\n                  Car heated for {heatedTime}min!{' '}\n                  {`${details.consumption}W`}\n                </Typography>\n              </>\n            ) : (\n              <Typography variant=\"h6\">\n                Your tolppa is off!\n              </Typography>\n            )}\n          </CardContent>\n          <CardContent>\n            <Typography variant=\"subtitle1\">\n              {details.licensePlate}\n            </Typography>\n            <Typography variant=\"body1\">\n              {details.temperature}°C, {details.reservations.length}/2\n              timers\n            </Typography>\n          </CardContent>\n        </Card>\n      </Grid>\n    )\n  }\n\n  const renderReservations = () => {\n    if (\n      !details ||\n      !details.reservations ||\n      !details.reservations.length\n    )\n      return null\n    return (\n      <Grid item xs={12} className=\"row\">\n        <Card>\n          <List>\n            {details.reservations.map(\n              ({ dateStart, timeStart, timeEnd }, index) => {\n                const momentDateStart = moment(\n                  `${dateStart} ${timeStart}`,\n                  'DD.MM.YYYY HH:mm',\n                )\n                const momentDateEnd = moment(\n                  `${dateStart} ${timeEnd}`,\n                  'DD.MM.YYYY HH:mm',\n                )\n                const diff = momentDateEnd.diff(\n                  momentDateStart,\n                  'minutes',\n                )\n\n                const chip = moment().isBetween(\n                  momentDateStart,\n                  momentDateEnd,\n                ) ? (\n                  <Chip\n                    variant=\"outlined\"\n                    className=\"active-timer-chip\"\n                    size=\"small\"\n                    label={`${momentDateEnd.diff(moment(), 'minutes')}min left`}\n                  />\n                ) : null\n\n                return (\n                  <ListItem key={index}>\n                    <ListItemAvatar>\n                      <PowerSettingsNewIcon />\n                    </ListItemAvatar>\n                    <ListItemText\n                      primary={`${dateStart}, ${timeStart}-${timeEnd}`}\n                      secondary={\n                        <>\n                          <span>{`${diff} minutes`}</span>\n                          {chip}\n                        </>\n                      }\n                    />\n                  </ListItem>\n                )\n              },\n            )}\n          </List>\n        </Card>\n      </Grid>\n    )\n  }\n\n  const renderForm = () =>\n    addQuick ? (\n      <>\n        <Grid item xs={12}>\n          <InputLabel htmlFor=\"dur\">\n            {formatMinutes(duration)}\n          </InputLabel>\n          <Slider\n            label=\"Duration\"\n            value={duration}\n            min={15}\n            max={200}\n            onChange={(e, value) => setDuration(value)}\n            aria-labelledby=\"continuous-slider\"\n          />\n        </Grid>\n        <Grid item xs={12}>\n          <InputLabel htmlFor=\"dur\">\n            Delay {formatMinutes(delay)}\n          </InputLabel>\n          <Slider\n            label=\"Duration\"\n            value={delay}\n            min={0}\n            max={200}\n            onChange={(e, value) => setDelay(value)}\n            aria-labelledby=\"continuous-slider\"\n          />\n        </Grid>\n      </>\n    ) : (\n      <>\n        <Grid item xs={12}>\n          <InputLabel htmlFor=\"dur\">\n            {formatMinutes(duration)}\n          </InputLabel>\n          <Slider\n            label=\"Duration\"\n            value={duration}\n            min={15}\n            max={200}\n            onChange={(e, value) => setDuration(value)}\n            aria-labelledby=\"continuous-slider\"\n          />\n        </Grid>\n        <Grid item xs={12} className=\"form-row\">\n          <KeyboardDatePicker\n            disableToolbar\n            variant=\"inline\"\n            format=\"dd.MM.yyyy\"\n            margin=\"normal\"\n            id=\"date-picker-inline\"\n            label=\"Date for new time\"\n            value={endDate}\n            onChange={setEndDate}\n            KeyboardButtonProps={{\n              'aria-label': 'change date',\n            }}\n          />\n        </Grid>\n        <Grid item xs={12} className=\"form-row\">\n          <KeyboardTimePicker\n            ampm={false}\n            margin=\"normal\"\n            id=\"time-picker\"\n            label=\"When the car should be ready\"\n            value={endTime}\n            onChange={setEndTime}\n            KeyboardButtonProps={{\n              'aria-label': 'change time',\n            }}\n          />\n        </Grid>\n      </>\n    )\n\n  return (\n    <div className=\"container\">\n      <Grid style={{ maxWidth: 300, width: 300 }}>\n        {renderMessage()}\n        {renderDetails()}\n        {renderReservations()}\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n          <Grid item xs={12} className=\"row\">\n            <Card>\n              <CardContent>\n                <Grid>\n                  <Grid item xs={12} className=\"center\">\n                    <Fab\n                      variant=\"extended\"\n                      color=\"primary\"\n                      onClick={() => setAddQuick(!addQuick)}\n                    >\n                      {addQuick ? (\n                        <>\n                          <AccessAlarms /> Schedule car heating\n                        </>\n                      ) : (\n                        <>\n                          <SpeedIcon /> Add quick timer\n                        </>\n                      )}\n                    </Fab>\n                  </Grid>\n                  {renderForm()}\n\n                  <Grid\n                    item\n                    xs={12}\n                    style={{\n                      textAlign: 'center',\n                      paddingTop: '1rem',\n                    }}\n                  >\n                    <Button\n                      variant=\"contained\"\n                      disabled={!token || (details && details.error)}\n                      color=\"primary\"\n                      onClick={submit}\n                    >\n                      Heat the car\n                    </Button>\n                  </Grid>\n                </Grid>\n              </CardContent>\n            </Card>\n          </Grid>\n          <Card style={{ textAlign: 'center' }}>\n            <CardContent className=\"button-card\">\n              <Button\n                size=\"large\"\n                color=\"secondary\"\n                variant=\"outlined\"\n                disabled={!token || (details && details.error)}\n                onClick={deleteTimers}\n              >\n                Clear all timers\n              </Button>\n              <Button\n                size=\"large\"\n                color=\"primary\"\n                variant=\"outlined\"\n                onClick={() =>\n                  window.open(\n                    'https://eparking.fi/fi/u#/reservations',\n                  )\n                }\n              >\n                Manage reservations!\n              </Button>\n            </CardContent>\n          </Card>\n          <Grid item xs={12} className=\"row pad\">\n            <Card style={{ padding: '.7rem .5rem' }}>\n              <InputLabel>Add cookies for sign in</InputLabel>\n              <TextareaAutosize\n                value={token}\n                onChange={onTokenChange}\n                rowsMin={10}\n                rowsMax={10}\n              />\n              <Button\n                size=\"small\"\n                color=\"primary\"\n                variant=\"outlined\"\n                onClick={resetToken}\n              >\n                Clear cookies\n              </Button>\n            </Card>\n          </Grid>\n        </MuiPickersUtilsProvider>\n      </Grid>\n    </div>\n  )\n}\n\nfunction formatMinutes(minutes) {\n  if (minutes < 60) return `${minutes}min`\n  return `${Math.floor(minutes / 60)}h ${minutes % 60}min`\n}\n\nfunction findActiveTimer(timers) {\n  const dateFormat = 'DD.MM.YYYY HH:mm'\n  const now = moment()\n  return timers.find(({ dateStart, dateEnd, timeStart, timeEnd }) => {\n    const start = moment(`${dateStart} ${timeStart}`, dateFormat)\n    const end = moment(`${dateEnd} ${timeEnd}`, dateFormat)\n    return start.isBefore(now) && end.isAfter(now)\n  })\n}\n\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef()\n\n  useEffect(() => {\n    savedCallback.current = callback\n  }, [callback])\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current()\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n  }, [delay])\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}